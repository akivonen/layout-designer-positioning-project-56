@mixin bold-uppercase {
  font-weight: bold;
  text-transform: uppercase;
}

@mixin media($max-width) {
  @media screen and (max-width: $max-width) {
    @content;
  }
}

@mixin container-flex(
  $row-gap: 16px,
  $col-gap: 16px,
  $justify-content: flex-start,
  $align-items: center,
  $flex-direction: row,
  $flex-wrap: wrap,
) {
  display: flex;
  gap: $row-gap $col-gap;
  justify-content: $justify-content;
  align-items: $align-items;
  flex-direction: $flex-direction;
  flex-wrap: $flex-wrap;
}

@mixin container-grid(
  $size: auto,
  $row-gap: 50px,
  $col-gap: 25px,
  $cols-count: auto-fill,
) {
  display: grid;
  gap: $row-gap $col-gap;
  grid-template-columns: repeat($cols-count, $size);
}

@mixin container-grid-list($name) {
  .#{$name} {
    &-list {
      @include container-grid(250px);
      h4 {
        text-transform: capitalize;
      }
      @include media($screen-medium) {
        grid-template-columns: repeat(auto-fill, 137px);
      }
    }
    @content
  }
}

@mixin bg-img($path) {
  background-image: url($path);
  background-position: center;
  background-size: cover;
}

@mixin text-color($color-name, $value) {
  .text-#{$color-name} {
    color: $value;
  }
}

@mixin text-size($size-name, $value) {
  .text-#{$size-name} {
    font-size: $value;
  }
}

@mixin margin-padding-size($side, $value, $type) {
  @if ($side == y) {
    .#{string.slice($type, 1, 1)}#{$side}-#{$value} {
      #{$type}-top: $value;
      #{$type}-bottom: $value;
    }
    
  } @else if ($side == x) {
    .#{string.slice($type, 1, 1)}#{$side}-#{$value} {
      #{$type}-left: $value;
      #{$type}-right: $value;
    }
  } @else {
    .#{string.slice($type, 1, 1)}#{string.slice($side, 1, 1)}-#{$value} {
      #{$type}-#{$side}: $value;
    }
  }
}